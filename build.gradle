plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.2'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
    id "org.sonarqube" version "6.0.1.5171"
}

group = 'dev.pabllopf'
version = '0.0.5'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


sonar {
    properties {
        property "sonar.projectKey", "pabllopf_ECommercePrice-Technical-Lead-Challenge-of-Inditex-BCNC-Group"
        property "sonar.organization", "pabllopf"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.login", System.getenv("SONAR_TOKEN")
    }
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}


dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.5'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JWT
    implementation 'io.jsonwebtoken:jjwt:0.12.6'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.mockito:mockito-core:4.11.0'
    testImplementation 'org.mockito:mockito-inline:4.11.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    jvmArgs '-XX:+EnableDynamicAgentLoading'
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

jacocoTestReport {
    dependsOn test // Asegura que las pruebas se ejecuten antes de generar el reporte
    reports {
        xml.required = true
        html.required = true
        html.destination file("${buildDir}/reports/jacoco")
    }
}
