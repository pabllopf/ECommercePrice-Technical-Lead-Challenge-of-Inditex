name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ]  # Trigger only on pushes to the master branch

jobs:
  Create_Release:
    if: "startsWith(github.event.head_commit.message, 'release:')"  # Only run if commit message starts with "release:"
    runs-on: ubuntu-latest  # Use latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      # Step 2: Set up Java 21 and Gradle
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # Use Eclipse Temurin JDK
          java-version: '21'
          cache: 'gradle'  # Cache Gradle dependencies

      # Step 3: Verify Java version
      - name: Check Java Version
        run: java -version

      # Step 4: Grant execute permissions to Gradle wrapper
      - name: Grant Execute Permissions to Gradle Wrapper
        run: chmod +x gradlew

      # Step 5: Install dependencies and build the project
      - name: Build Project
        run: ./gradlew clean build

      # Step 6: Extract the current version from build.gradle
      - name: Get Current Version from build.gradle
        run: |
          VERSION=$(grep -Po "version = '\K[^\']+" build.gradle)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted VERSION from build.gradle: $VERSION"  # Traza añadida para ver el valor de VERSION

      # Step 7: Increment the version
      - name: Increment Version
        run: |
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))  # Increment the patch version
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Incremented version: $NEW_VERSION"  # Traza añadida para ver el valor de NEW_VERSION

      - name: git config --global user.name github-actions
        run: git config --global user.name "${{ secrets.USER_NAME }}"

      - name: git config --global user.email github-actions@github.com
        run: git config --global user.email "${{ secrets.USER_EMAIL }}"

      - name: git config user.name
        run: git config user.name

      - name: git config user.email
        run: git config user.email

      - name: Find common ancestor
        run: git merge-base --fork-point origin/master

      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: git tag
        run: git tag -s "v${{ env.VERSIONFINAL }}" -m "v${{ env.VERSIONFINAL }}"
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push --tags
        run: git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      # Step 10: Update CHANGELOG
      - name: Update CHANGELOG
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ env.NEW_VERSION }}"  # Correctly use the incremented version
          writeToFile: true
          excludeTypes: chore, perf
          changelogFilePath: changelog.md
          includeRefIssues: true
          useGitmojis: true
          includeInvalidCommits: false
          reverseOrder: false
      
      # Step 11: Create a GitHub release
      - uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changes }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          name: "v${{ env.NEW_VERSION }} has arrived !!!"
          tag_name: "v${{ env.NEW_VERSION }}"
          generate_release_notes: true
          append_body: true
          files: |
            build/libs/*.jar  # Upload built JAR file

      - name: git fetch
        run: git fetch

      - name: git checkout master
        run: git checkout master

      - name: git pull
        run: git pull

      - name: git add .
        run: git add .

      - name: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        run: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push
        run: git push
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}
