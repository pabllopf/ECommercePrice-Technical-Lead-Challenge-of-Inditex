# Workflow to automate Java 21, Spring Boot, Gradle, and OpenAPI release process
name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ] # Trigger only on pushes to the master branch


jobs:
  Create_Release:
    if: "startsWith(github.event.head_commit.message, 'release:')" # Only run if commit message starts with "release:"
    runs-on: ubuntu-latest # Use latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      # Step 2: Set up Java 21 and Gradle
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Use Eclipse Temurin JDK
          java-version: '21'
          cache: 'gradle' # Cache Gradle dependencies

      # Step 3: Verify Java version
      - name: Check Java Version
        run: java -version

      # Step 4: Grant execute permissions to Gradle wrapper
      - name: Grant Execute Permissions to Gradle Wrapper
        run: chmod +x gradlew

      # Step 5: Install dependencies and build the project
      - name: Build Project
        run: ./gradlew clean build

      # Step 6: Extract current version from build.gradle or version.properties
      - name: Get Current Version
        run: echo "VERSION=$(./gradlew properties | grep "version:" | awk '{print $2}')" >> $GITHUB_ENV

      - name: Print Current Version
        run: |
          echo "Current version: $VERSION"

      # Step 7: Increment version number
      - name: Increment Version
        run: |
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Print New Version
        run: |
          echo "Current version: $VERSION"

      # Step 8: Update version in build.gradle
      - name: Update Version in build.gradle
        run: sed -i "s/version = '$VERSION'/version = '$NEW_VERSION'/" build.gradle

      - name: git config --global user.name github-actions
        run: git config --global user.name "${{ secrets.USER_NAME }}"

      - name: git config --global user.email github-actions@github.com
        run: git config --global user.email "${{ secrets.USER_EMAIL }}"

      - name: git config user.name
        run: git config user.name

      - name: git config user.email
        run: git config user.email

      - name: Find common ancestor
        run: git merge-base --fork-point origin/master

      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: git tag
        run: git tag -s "v${{ env.VERSIONFINAL }}" -m "v${{ env.VERSIONFINAL }}"
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: git push --tags
        run: git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      - name: Update CHANGELOG
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ env.VERSIONFINAL }}"
          writeToFile: true
          excludeTypes: chore, perf

      # Step 12: Create a GitHub Release
      - uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changes }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          name: "v${{ env.VERSIONFINAL }} has arrived !!!"
          tag_name: "v${{ env.VERSIONFINAL }}"
          generate_release_notes: true
          append_body: true
          files: |
            build/libs/*.jar # Upload built JAR file
