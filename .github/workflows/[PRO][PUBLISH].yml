name: "[PRO][PUBLISH]"

on:
  push:
    branches: [ master ]  # Trigger workflow only when pushing to the master branch

jobs:
  Create_Release:
    if: "startsWith(github.event.head_commit.message, 'release:')"  # Execute only if the commit message starts with "release:"
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Clone the repository and fetch all history
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: master
          fetch-depth: 0

      # Set up Java 21 using Eclipse Temurin distribution and enable Gradle caching
      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      # Verify the installed Java version
      - name: Check Java Version
        run: java -version

      # Extract the current version from build.gradle
      - name: Get Current Version from build.gradle
        run: |
          VERSION=$(grep -Po "version = '\K[^\']+" build.gradle)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Extracted VERSION from build.gradle: $VERSION"

      # Increment the patch version by 1
      - name: Increment Version
        run: |
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          PATCH=$(echo $VERSION | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Incremented version: $NEW_VERSION"

      # Update build.gradle with the new version
      - name: Update Version in build.gradle
        run: |
          echo "Updating build.gradle with version $NEW_VERSION"
          sed -i "s/version = '$VERSION'/version = '$NEW_VERSION'/" build.gradle
          echo "Updated build.gradle with new version: $NEW_VERSION"

      # Grant execute permissions to the Gradle wrapper script
      - name: Grant Execute Permissions to Gradle Wrapper
        run: chmod +x gradlew

      # Build the project, ensuring dependencies are installed
      - name: Build Project
        run: ./gradlew clean build

      # Generate the application JAR file without using the Gradle daemon
      - name: Build JAR Package
        run: ./gradlew bootJar --no-daemon

      # Configure Git with the bot's credentials
      - name: Configure Git
        run: |
          git config --global user.name "${{ secrets.USER_NAME }}"
          git config --global user.email "${{ secrets.USER_EMAIL }}"

      # Import the bot's GPG key for signing commits
      - name: Import bot's GPG key for signing commits
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.BOT_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.BOT_GPG_PASSPHRASE }}
          git_config_global: true
          git_user_signingkey: true
          git_commit_gpgsign: true

      # Create a signed Git tag for the new release
      - name: Create Git tag for release
        run: |
          echo "Creating tag v${{ env.NEW_VERSION }}"
          git tag -s "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      # Push the new tag to GitHub
      - name: Push tags to GitHub
        run: |
          echo "Pushing tag v${{ env.NEW_VERSION }} to GitHub"
          git push --tags
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      # Update the CHANGELOG file with the latest release details
      - name: Update CHANGELOG
        id: changelog
        uses: Requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: "v${{ env.NEW_VERSION }}"
          writeToFile: true
          excludeTypes: chore, perf

      # Create a GitHub release and upload the built JAR file
      - uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.changelog.outputs.changes }}
          token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          name: "v${{ env.NEW_VERSION }} has arrived !!!"
          tag_name: "v${{ env.NEW_VERSION }}"
          generate_release_notes: true
          append_body: true
          files: |
            build/libs/*.jar
            build/libs/EcommercePriceAPI-*.jar

      # Ensure the latest repository state is pulled
      - name: Fetch Latest Changes
        run: git fetch

      - name: Checkout Master Branch
        run: git checkout master

      - name: Pull Latest Changes
        run: git pull

      # Add all changes to Git
      - name: Stage Changes
        run: git add .

      # Commit the changes with GPG signing
      - name: Commit Updated Package Version
        run: git commit -S -m "Create the packages of version '$VERSIONFINAL'."
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}

      # Push the changes to the repository
      - name: Push Changes
        run: git push
        env:
          GITHUB_TOKEN: ${{ secrets.OSLASH_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: ${{ secrets.USER_NAME }}
          GIT_AUTHOR_EMAIL: ${{ secrets.USER_EMAIL }}
          GIT_COMMITTER_NAME: ${{ secrets.USER_NAME }}
          GIT_COMMITTER_EMAIL: ${{ secrets.USER_EMAIL }}
